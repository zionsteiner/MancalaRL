Problem: Pygame or Tkinter?
Which will be easier to expose the game API to the algorithms?
Or algos don't have to directly use game API. It can be a separate handler, then it wouldn't matter what changes I make
to either, I only have to change the handler.

class Algo:
    # how to define state, move?
    def move(state) -> move

class Mancala:
    self.board
    self.player1
    self.player2

    def init()
    def start()
    def calc_results()

class Board:
    self.spaces

class Player:
    def move


design text-based game first, then plug into pygame? or start with pygame initially? ideally, the game logic doesn't depend on either
presentation method. how to do that?

1. mancala text-based
2. abstract it s.t.
    * i can plug it into gui or text-based
    * i can use any algo/human self to interface w/ it

self has board side, or board has both sides?

reflections:
    * how could design this so that it is testable? how to break it up into testable functions w/ minimal setup?

game components should send game results/updates/messages to a component responsible for displaying the output and
gathering user input

remove magic numbers

need to extract game logic from game controller and players

if minimax takes a long time, try caching the tree
    * multiple move sequences could lead to the same board state. use this observation
    * to optimize tree computation
